const PicoSanity = require("picosanity");
const fs = require("fs").promises;

const client = new PicoSanity({
  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET || "development",
  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID || "",
  apiVersion: "2021-03-25",
  useCdn: process.env.NODE_ENV === "production",
});

export type GroqThemeType = {
  colors: { name: string; value: string }[];
  fonts: { name: string; value: string }[];
  stylesheets: string[];
};

export type ThemeType = {
  colors: Record<string, string>;
  fonts: Record<string, string[]>;
  stylesheets: string;
  safelist: string[];
};

/**
 * Get published theme from Sanity config.theme
 */

export async function getTheme(): Promise<ThemeType> {
  const theme: GroqThemeType = await client.fetch(`*[_id == "config_theme"][0] {
    colors[] { name, value },
    fonts[] { name, value },
    "stylesheets": stylesheets[] { value }.value
  }`);

  const colors = formatColors(theme.colors);
  const fonts = formatFonts(theme.fonts);
  const safelist = formatSafelist(colors, fonts);
  const stylesheets = `/* This file is automatically generated. */

  ${theme.stylesheets?.join("\n\n")}
  `;

  return { colors, fonts, stylesheets, safelist };
}

/**
 * Format colours
 */

export function formatColors(colors: { name: string; value: string }[]) {
  const formattedColors = colors.reduce((acc, color) => {
    const { name, value } = color;
    const formattedName = name.replace(/ /g, "-").toLowerCase();
    acc[formattedName] = value;
    return acc;
  }, {} as Record<string, string>);
  return formattedColors;
}

/**
 * Format fonts
 */

export function formatFonts(fonts: { name: string; value: string }[]) {
  const formattedFonts = fonts.reduce((acc, font) => {
    const { name, value } = font;
    const formattedName = name.replace(/ /g, "-").toLowerCase();
    acc[formattedName] = value
      .replace(/"/g, "")
      .replace(/'/g, "")
      .split(",")
      .map((font) => font.trim());
    return acc;
  }, {} as Record<string, string[]>);
  return formattedFonts;
}

/**
 * format safelist of colours and fonts
 * e.g safelist: ["bg-primary", "text-primary", "font-primary"]
 */

export function formatSafelist(
  colors: ThemeType["colors"],
  fonts: ThemeType["fonts"],
) {
  function clean(name: string) {
    return name.replace(/ /g, "-").toLowerCase();
  }

  const safelist = [
    ...Object.keys(colors).map((color) => `bg-${clean(color)}`),
    ...Object.keys(colors).map((color) => `text-${clean(color)}`),
    ...Object.keys(colors).map((color) => `border-${clean(color)}`),
    ...Object.keys(colors).map((color) => `divide-${clean(color)}`),
    ...Object.keys(fonts).map((font) => `font-${clean(font)}`),
  ];
  return safelist;
}

export default async function generateTheme() {
  const theme = await getTheme();

  await fs.writeFile(
    `${__dirname}/../../_theme.ts`,
    `export default ${JSON.stringify(theme, null, 2)}`,
  );

  // write stylesheets to file
  await fs.writeFile(`${__dirname}/../../styles/_theme.css`, theme.stylesheets);
}

generateTheme();
